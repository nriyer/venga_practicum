m[1]
m[[1]][[1]]
dtm
m <- dtm[,top10]
m <- as.data.frame(as.matrix(dtm))
View(m)
m <- dtm[,top10]
inspect(m)
dtm <- TermDocumentMatrix(ACQstop)
m <- as.data.frame(as.matrix(dtm))
m <- dtm[,top10]
inspect(m)
dtm <- TermDocumentMatrix(ACQstop)
m <- dtm[,top10]
m
dtm2 <- DocumentTermMatrix(ACQstop)
m <- dtm2[,top10]
dtm <- TermDocumentMatrix(ACQstop)
m <- dtm[,top10]
m[[1]]
m[[1]][[2]]
m[1]
m[2]
dtm <- TermDocumentMatrix(ACQstop)
m <- as.data.frame(as.matrix(dtm))
m <- dtm[,top10]
v <- sort(rowSums(m),decreasing=TRUE)
dtm <- TermDocumentMatrix(ACQstop)
m <- as.data.frame(as.matrix(dtm))
m <- dtm[,top10]
v <- sort(rowSums(m),decreasing=TRUE)
dtm <- TermDocumentMatrix(ACQstop)
m <- as.data.frame(as.matrix(dtm))
m <- m[,top10]
m <- as.matrix(m)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
View(d)
dtm <- TermDocumentMatrix(ACQstop)
m <- as.data.frame(as.matrix(dtm))
m <- dtm[,top10]
inspect(m)
dtm <- TermDocumentMatrix(ACQstop)
m <- as.data.frame(as.matrix(dtm))
m <- m[,top10]
m <- as.matrix(m)
v <- sort(m,decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
v
View(m)
dtm <- TermDocumentMatrix(ACQstop)
m <- as.data.frame(as.matrix(dtm))
m <- m[,top10]
m <- as.matrix(m)
v <- sort(m,decreasing=TRUE)
d <- data.frame(word = row.names(m),freq=v)
View(d)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
v <- sort(m[,1],decreasing=TRUE)
d <- data.frame(word = row.names(m),freq=v)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
{
dtm <- TermDocumentMatrix(ACQstop)
m <- as.data.frame(as.matrix(dtm))
m <- m[,top10]
m <- as.matrix(m)
v <- sort(m[,1],decreasing=TRUE)
d <- data.frame(word = row.names(m),freq=v)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
}
{
dtm <- TermDocumentMatrix(ACQstop)
m <- as.data.frame(as.matrix(dtm))
m <- m[,top10]
m <- as.matrix(m)
v <- sort(m[,doc],decreasing=TRUE)
d <- data.frame(word = row.names(m),freq=v)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
}
wordcloud.func <- function(ACQstop, doc)
{
dtm <- TermDocumentMatrix(ACQstop)
m <- as.data.frame(as.matrix(dtm))
m <- m[,top10]
m <- as.matrix(m)
v <- sort(m[,doc],decreasing=TRUE)
d <- data.frame(word = row.names(m),freq=v)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
}
for (i in 1:10){
wordcloud.func(ACQstop,i)
}
wordcloud.func <- function(ACQstop, doc)
{
dtm <- TermDocumentMatrix(ACQstop)
m <- as.data.frame(as.matrix(dtm))
m <- m[,top10]
m <- as.matrix(m)
v <- sort(m[,doc],decreasing=TRUE)
d <- data.frame(word = row.names(m),freq=v)
set.seed(1234)
print(wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2")))
}
Q
wordcloud.func <- function(ACQstop, doc)
{
dtm <- TermDocumentMatrix(ACQstop)
m <- as.data.frame(as.matrix(dtm))
m <- m[,top10]
m <- as.matrix(m)
v <- sort(m[,doc],decreasing=TRUE)
d <- data.frame(word = row.names(m),freq=v)
set.seed(1234)
print(wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2")))
}
for (i in 1:10){
wordcloud.func(ACQstop,i)
}
top10_docs <- sort_top10[1:10,]
#tokenize the top 10 docs then look for the longest word
tokened <- tokenize(topdocs,what = c("word"))
tokened <- tokenize(top10_docs,what = c("word"))
top10_docs <- sort_top10[1:10,]
#tokenize the top 10 docs then look for the longest word
tokened <- tokenize(topdocs,what = c("word"))
a <- tokened[[2]]
top10_docs
inspect(topdocs)
topdocs
topdocs[[2]]
names(topdocs[1])
#split into sentences
get_sentence_df_func <- function(x){
sentence_df <- data.frame(sentence = character(0),
document = character(0))
for (i in 1:10){
temp <- data.frame(sentence=tokenize_sentences(x[[i]][[1]]),id=names(x[i]))
sentence_df <- rbind(sentence_df,temp)
}
return(sentence_df)
}
#data frame of sentences by document
text_sent <- get_sentence_df_func(topdocs)
View(text_sent)
text_sent <- get_sentence_df_func(topdocs)
#word count for each sentence
text_sent$sentence <- as.character(text_sent$sentence)
count <- c()
sapply(strsplit(text_sent$sentence[23], " "), length)
for (i in 1:nrow(text_sent)){
count[i] <- sapply(strsplit(text_sent$sentence[i], " "), length)
}
#length of each sentence in each document
count_sentences <- cbind(count,text_sent)
longest_10 <- count_sentences %>% group_by(id) %>%
arrange(desc(count)) %>% top_n(1,count) %>% distinct(id)
longest10
longest_10
sort(longest_10)
View(longest_10)
longest_10 <- longest_10 %>% arrange(desc(count))
longest_10
as.table(longest_10)
max_length <- c()
word <- c()
for (i in 1:10){
words <- tokened[[i]]
word[i] <- words[nchar(words) == max(nchar(words))]
max_length[i] <- max(nchar(words))
}
final.longest_word <- data.frame(max_length = max_length,word=word)
tokened <- tokenize(topdocs,what = c("word"))
names(tokened)
topdocs <- mycorpus[mycorpus$documents$id %in% top10]
topdocs[[1]]
tokened <- tokenize(topdocs,what = c("word"))
str(topdocs)
mycorpus <- corpus(acq)
summary_acq <- as.data.frame(summary(mycorpus))
sort_top10 <- summary_acq %>% arrange(desc(Tokens))
top_10_docs <- subset(sort_top10, select=c(id, heading))[1:10,]
top10 <- top_10_docs[,1]
topdocs <- mycorpus[mycorpus$documents$id %in% top10]
topdocs[[1]]
str(topdocs)
str(topdocs[[1]])
tokened <- tokenize(topdocs[[1]],what = c("word"))
library(tm)
library(dplyr)
library(ggplot2)
library(wordcloud)
library(quanteda)
library(wordnet)
library(RColorBrewer)
library(NLP)
library(openNLP)
library(textreuse)
data("acq")
head(acq)
tokened <- tokenize(topdocs,what = c("word"))
names(tokened)
str(topdocs)
get_word_df_func <- function(x){
word_df <- data.frame(word = character(0),
document = character(0))
for (i in 1:10){
temp <- data.frame(word=tokenize_words(x[[i]][[1]]),id=names(x[i]))
word_df <- rbind(word_df,temp)
}
return(word_df)
}
get_word_df_func(topdocs)
word_df <- get_word_df_func(topdocs)
View(word_df)
max_length <- c()
word <- c()
for (i in 1:10){
words <- tokenize_words(x[[i]][[1]])
word[i] <- words[nchar(words) == max(nchar(words))]
max_length[i] <- max(nchar(words))
}
max_length <- c()
word <- c()
for (i in 1:10){
words <- tokenize_words(topdocs[[i]][[1]])
word[i] <- words[nchar(words) == max(nchar(words))]
max_length[i] <- max(nchar(words))
}
final.longest_word <- data.frame(max_length = max_length,word=word)
View(final.longest_word)
max_length <- c()
word <- c()
for (i in 1:10){
words <- tokenize_words(topdocs[[i]][[1]])
word[i] <- words[nchar(words) == max(nchar(words))]
max_length[i] <- max(nchar(words))
}
final.longest_word <- data.frame(max_length = max_length,word=word)
View(final.longest_word)
max_length <- c()
word <- c()
id <- c()
for (i in 1:10){
words <- tokenize_words(topdocs[[i]][[1]])
word[i] <- words[nchar(words) == max(nchar(words))]
max_length[i] <- max(nchar(words))
id[i] <- topdocs[i]
}
topdocs[1]
topdocs[[1]]
topdocs[1][1]
topdocs[[1]][1]
final.longest_word <- data.frame(max_length = max_length,word=word,id = id)
View(final.longest_word)
topdocs[[1]][1]
names(topdocs[1])
max_length <- c()
word <- c()
id <- c()
for (i in 1:10){
words <- tokenize_words(topdocs[[i]][[1]])
word[i] <- words[nchar(words) == max(nchar(words))]
max_length[i] <- max(nchar(words))
id[i] <- names(topdocs[i])
}
final.longest_word <- data.frame(max_length = max_length,word=word,id = id)
View(final.longest_word)
View(text_sent)
str(count_sentences$sentence)
count_sentences$sentence_nopunct[4] <- ( gsub("[[:punct:]]", "", count_sentences$sentence[4]) )
#loop to remove punctuation from each sentence
nopunct <- c()
for (i in 1:nrow(count_sentences)){
nopunct[i] <-  ( gsub("[[:punct:]]", "", count_sentences$sentence[i]) )
}
#bind final df together
final_nopunct_df <- cbind(nopunct,count_sentences)
View(final_nopunct_df)
View(final.longest_word)
all_words <- c()
id.all <- c()
for (i in 1:10){
all_words <- tokenize_words(topdocs[[i]][[1]])
id.all[i] <- names(topdocs[i])
}
all.words <- cbind(all_words,id.all)
all.words <- as.data.frame(all_words)
View(all.words)
pos_tag_annotator <- Maxent_POS_Tag_Annotator(all_words)
install.packages("openNLPdata")
library(openNLPdata)
pos_tag_annotator <- Maxent_POS_Tag_Annotator(all_words)
library(openNLP)
library(openNLPdata)
library(textreuse)
library(NLP)
pos_tag_annotator <- Maxent_POS_Tag_Annotator(all_words)
pos_tag_annotator <- Maxent_POS_Tag_Annotator(all_words[1,])
all_words[]
all_words[1,]
all.words[1,]
str(all.words)
all.words$all_words <- as.character(all.words)
pos_tag_annotator <- Maxent_POS_Tag_Annotator(all.words[1,])
Maxent_POS_Tag_Annotator(language = "en", probs = FALSE, model = NULL)
pos_tag_annotator <- Maxent_POS_Tag_Annotator(all.words[1,])
all.words[1,]
View(all.words)
all_words <- c()
id.all <- c()
for (i in 1:10){
all_words <- tokenize_words(topdocs[[i]][[1]])
id.all[i] <- names(topdocs[i])
}
all.words <- as.data.frame(all_words)
all.words$all_words <- as.character(all.words)
View(all.words)
for (i in 1:10){
all_words <- tokenize_words(topdocs[[i]][[1]])
id.all[i] <- names(topdocs[i])
}
all.words <- as.data.frame(all_words)
View(all.words)
all.words$all_words <- as.character(all.words$all_words)
Maxent_POS_Tag_Annotator(language = "en", probs = FALSE, model = NULL)
pos_tag_annotator <- Maxent_POS_Tag_Annotator(all.words[1,])
install.packages("openNLPmodels.investor")
library(openNLPmodels.investor)
Maxent_POS_Tag_Annotator(language = "en", probs = FALSE, model = NULL)
pos_tag_annotator <- Maxent_POS_Tag_Annotator(all.words[1,])
pos_tag_annotator
discounts <- function(df){
discounts.cluster <- df %>% select(max_party_size,max_discount,max_spend,cluster_number)
discounts.bycluster <- discounts.cluster %>% group_by(cluster_number,max_party_size) %>%
summarise(total_discounts = sum(max_discount)) %>%
arrange(cluster_number,max_party_size)
discounts.patterns <- discounts.cluster %>% group_by(cluster_number,max_party_size) %>%
summarise(total_check_withdiscounts = sum(max_spend) - sum(max_discount)) %>%
arrange(cluster_number,max_party_size)
discount.bycluster.plot <- ggplot(data = discounts.bycluster, aes(x=factor(max_party_size), y=abs(total_discounts) )) +
geom_bar(stat="identity") + facet_wrap(~cluster_number,scales="free")
print(discount.bycluster.plot)
discounts.pattern.plot <- ggplot(data = discounts.patterns, aes(x=factor(max_party_size), y=abs(total_check_withdiscounts) )) +
geom_bar(stat="identity") + facet_wrap(~cluster_number,scales="free")
print(discounts.pattern.plot)
}
load("~/Desktop/practicum/venga_practicum/final_analysis.cluster.RData")
setwd("~/Desktop/practicum/venga_practicum/")
library(dplyr)
library(ggplot2)
library(data.table)
library(tidyr)
library(reshape2)
library(stats)
library(caret)
library(corrplot)
library(fpc)
library(cluster)
options(scipen=999)
options( java.parameters = "-Xmx4g" )
#Final analysis based on three groups; first,repeat, and all users
#This analysis is using the clusters built from the 15 variable reduced set.
#These are the columns that built the actual clusters, after dimension reduction:
reduced.names
#Basing the columns off of segmentation categories
#functions for analysis
total_rev_cluster <- function(df){
total_rev <- c()
for (i in 1:max(df$cluster_number)){
total_rev[i] <- df %>% filter(cluster_number == i) %>% summarise(total_revenue = sum(avg_spend))
}
total_rev.cluster <- data.frame(cluster.number = 1:max(df$cluster_number),total_revenue = t(as.data.frame(total_rev)))
return(total_rev.cluster)
}
hour_month <- function(df){
df$hour <- substring(df$first_visit_date,12,13)
df$month <- substring(df$first_visit_date,6,7)
return(df)
}
highest_lowest <- function(h,l,df,n){
#highest
high <- df %>% filter(cluster_number == h)
foodvswine.high <- high %>% select(avg_Food_spend,avg_Wine_spend,avg_Liquor.Beer_spend) %>%
summarise(food = sum(avg_Food_spend), wine = sum(avg_Wine_spend), liquor = sum(avg_Liquor.Beer_spend))
#lowest
low <- df %>% filter(cluster_number == l)
foodvswine.low <- low %>% select(avg_Food_spend,avg_Wine_spend,avg_Liquor.Beer_spend) %>%
summarise(food = sum(avg_Food_spend), wine = sum(avg_Wine_spend), liquor = sum(avg_Liquor.Beer_spend))
#looking at the hours and total covers
covers.high <- high %>% select(max_cover_count,first_visit_date) %>%
summarise(covers= mean(max_cover_count))
#add hour to see if there is a pattern in hour by cluster
time.high <- high %>% select(hour) %>% group_by(hour) %>% summarise(n = n())
covers.low<- low %>% select(max_cover_count,first_visit_date) %>%
summarise(covers= mean(max_cover_count))
#add hour to see if there is a pattern in hour by cluster
time.low <- low %>% select(hour) %>% group_by(hour) %>% summarise(n = n())
highlow <- list(foodvswine.high,foodvswine.low,covers.high,covers.low,time.high,time.low)
names(highlow) <- c(paste0("foodvswine.high",n),paste0("foodvswine.low",n),paste0("covers.high",n),
paste0("covers.low",n),paste0("time.high",n),paste0("time.low",n))
return(highlow)
}
month_hour <- function(df,title){
bymonth <- df %>% select(cluster_number,month) %>% count(cluster_number,month) %>% arrange(cluster_number,month)
print(ggplot(data = bymonth, aes(x=factor(month), y=n)) + geom_bar(stat="identity") + ggtitle(title)+facet_wrap(~cluster_number,scales="free"))
#look at number of people by time - by cluster
byhour <- df %>% select(cluster_number,hour,first_weekend_visit) %>% count(cluster_number,hour,first_weekend_visit) %>% arrange(cluster_number,hour)
#this looks at number of guests, by hour and if they were weekend (blue) or not.
print(ggplot(data = byhour, aes(x=factor(hour), y=n, color = factor(first_weekend_visit))) +
geom_bar(stat="identity") +
ggtitle(title) +
facet_wrap(~cluster_number,scales="free"))
}
holidays <- function(df){
holidays.cluster <- df %>% select(first_newyears_visit,first_christmas_visit,first_valentine_visit,cluster_number)
new_years <-holidays.cluster %>%
count(cluster_number,first_newyears_visit) %>%
filter(first_newyears_visit == 1) %>%
arrange(first_newyears_visit)
christmas <- holidays.cluster %>%
count(cluster_number,first_christmas_visit) %>%
filter(first_christmas_visit == 1) %>%
arrange(first_christmas_visit)
valentine <- holidays.cluster %>%
count(cluster_number,first_valentine_visit) %>%
filter(first_valentine_visit == 1) %>%
arrange(first_valentine_visit)
new_years$first_newyears_visit <- new_years$n
new_years$n <- NULL
christmas$first_christmas_visit <- christmas$n
christmas$n <- NULL
valentine$first_valentine_visit <- valentine$n
valentine$n <- NULL
all.holidays <- merge(christmas,new_years,by = "cluster_number",all= TRUE)
all.holidays <- merge(all.holidays,valentine, by = "cluster_number",all=TRUE)
all.holidays <- as.data.frame(all.holidays)
for (i in 2:length(all.holidays)){
holidays.plot <- ggplot(data = all.holidays, aes(x=factor(cluster_number), y=all.holidays[,i])) +
geom_bar(stat="identity") + labs(y = names(all.holidays)[i])
print(holidays.plot)
}
}
discounts <- function(df){
discounts.cluster <- df %>% select(max_party_size,max_discount,max_spend,cluster_number)
discounts.bycluster <- discounts.cluster %>% group_by(cluster_number,max_party_size) %>%
summarise(total_discounts = sum(max_discount)) %>%
arrange(cluster_number,max_party_size)
discounts.patterns <- discounts.cluster %>% group_by(cluster_number,max_party_size) %>%
summarise(total_check_withdiscounts = sum(max_spend) - sum(max_discount)) %>%
arrange(cluster_number,max_party_size)
discount.bycluster.plot <- ggplot(data = discounts.bycluster, aes(x=factor(max_party_size), y=abs(total_discounts) )) +
geom_bar(stat="identity") + facet_wrap(~cluster_number,scales="free")
print(discount.bycluster.plot)
discounts.pattern.plot <- ggplot(data = discounts.patterns, aes(x=factor(max_party_size), y=abs(total_check_withdiscounts) )) +
geom_bar(stat="identity") + facet_wrap(~cluster_number,scales="free")
print(discounts.pattern.plot)
}
#adding 'hour' and 'month' columns
firstuser.final <- hour_month(firstuser.final)
repeat.final <- hour_month(repeat.final)
user.final <- hour_month(user.final)
#Total revenue by cluster
first.users.revenue <- total_rev_cluster(firstuser.final)
return.users.revenue <- total_rev_cluster(repeat.final)
users.revenue <- total_rev_cluster(user.final)
#First time results
ggplot(first.users.revenue, aes(x = factor(cluster.number), y = total_revenue)) +
geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) + ggtitle("Total Revenue Non-Repeat") +
scale_fill_brewer( palette = "Blues")
ggplot(first.users.revenue, aes(x = factor(cluster.number), y = total_revenue)) +
geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) + ggtitle("Total Revenue Non-Repeat") +
scale_fill_brewer(palette = "Blues")
library(RColorBrewer)
ggplot(first.users.revenue, aes(x = factor(cluster.number), y = total_revenue)) +
geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) + ggtitle("Total Revenue Non-Repeat") +
scale_fill_brewer(palette = "Blues")
ggplot(first.users.revenue, aes(x = factor(cluster.number), y = total_revenue)) +
geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) + ggtitle("Total Revenue Non-Repeat") +
scale_fill_brewer()
ggplot(first.users.revenue, aes(x = factor(cluster.number), y = total_revenue)) +
geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) + ggtitle("Total Revenue Non-Repeat") +   scale_fill_brewer()
ggplot(first.users.revenue, aes(x = factor(cluster.number), y = total_revenue)) +
geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) + ggtitle("Total Revenue Non-Repeat") + scale_fill_gradient()
ggplot(first.users.revenue, aes(x = factor(cluster.number), y = total_revenue)) +
geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) + + scale_fill_gradient()+ ggtitle("Total Revenue Non-Repeat")
ggplot(first.users.revenue, aes(x = factor(cluster.number), y = total_revenue)) +
geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +  scale_fill_gradient()+ ggtitle("Total Revenue Non-Repeat")
a <- ggplot(first.users.revenue, aes(x = factor(cluster.number), y = total_revenue)) +
geom_bar(stat = "identity") + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) + ggtitle("Total Revenue Non-Repeat")
a + scale_fill_brewer()
